{"version":3,"sources":["webpack:///./node_modules/dialog-polyfill/dist/dialog-polyfill.esm.js"],"names":["supportCustomEvent","window","CustomEvent","safeDispatchEvent","target","event","check","type","toLowerCase","dispatchEvent","createsStackingContext","el","document","body","s","getComputedStyle","invalid","k","ok","undefined","opacity","position","webkitOverflowScrolling","parentElement","findNearestDialog","localName","parentNode","host","safeBlur","shadowRoot","activeElement","blur","inNodeList","nodeList","node","i","length","isFormMethodDialog","hasAttribute","getAttribute","findFocusableElementWithin","hostElement","opts","query","map","push","querySelector","join","Element","prototype","elems","querySelectorAll","tagName","isConnected","element","contains","findFormSubmitter","submitter","form","HTMLFormElement","dialogPolyfill","formSubmitter","root","getRootNode","maybeHandleSubmit","defaultPrevented","value","imagemapUseValue","dialog","formmethod","preventDefault","close","dialogPolyfillInfo","this","dialog_","replacedStyleTop_","openAsModal_","setAttribute","show","bind","showModal","addEventListener","returnValue","mo","MutationObserver","maybeHideModal","observe","attributes","attributeFilter","timeout","removed","cb","downgradeModal","delayModel","ev","cand","substr","clearTimeout","setTimeout","forEach","name","Object","defineProperty","set","setOpen","get","backdrop_","createElement","className","backdropMouseEvent_","x","createEvent","initCustomEvent","bubbles","cancelable","detail","Event","style","zIndex","top","removeChild","dm","removeDialog","removeAttribute","e","focus","fake","insertBefore","firstChild","tabIndex","redirectedEvent","initMouseEvent","screenX","screenY","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","button","relatedTarget","stopPropagation","focus_","updateZIndex","dialogZ","backdropZ","Error","open","pushDialog","console","warn","needsCentering","reposition","nextSibling","opt_returnValue","closeEvent","scrollTop","documentElement","topValue","innerHeight","offsetHeight","Math","max","styleSheets","styleSheet","cssRules","j","rule","selectedNodes","selectorText","cssTop","getPropertyValue","cssBottom","computedStyle","bottom","isInlinePositionSetByStylesheet","HTMLDialogElement","forceRegisterDialog","pendingDialogStack","checkDOM","checkDOM_","overlay","forwardTab_","handleKey_","handleFocus_","zIndexLow_","zIndexHigh_","mo_","records","rec","c","removedNodes","concat","DialogManager","blockDocument","childList","subtree","unblockDocument","removeEventListener","disconnect","updateStacking","dpi","last","p","appendChild","containedByTopDialog_","candidate","composedPath","compareDocumentPosition","Node","DOCUMENT_POSITION_PRECEDING","keyCode","cancelEvent","clone","slice","indexOf","allowed","unshift","index","splice","testForm","method","methodDescriptor","getOwnPropertyDescriptor","realGet","call","realSet","v","path","shift","valid","offsetX","offsetY","nativeFormSubmit","submit","replacementFormSubmit"],"mappings":"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","file":"js/chunk-2d2086a6.f93a0777.js","sourcesContent":["// nb. This is for IE10 and lower _only_.\nvar supportCustomEvent = window.CustomEvent;\nif (!supportCustomEvent || typeof supportCustomEvent === 'object') {\n  supportCustomEvent = function CustomEvent(event, x) {\n    x = x || {};\n    var ev = document.createEvent('CustomEvent');\n    ev.initCustomEvent(event, !!x.bubbles, !!x.cancelable, x.detail || null);\n    return ev;\n  };\n  supportCustomEvent.prototype = window.Event.prototype;\n}\n\n/**\n * Dispatches the passed event to both an \"on<type>\" handler as well as via the\n * normal dispatch operation. Does not bubble.\n *\n * @param {!EventTarget} target\n * @param {!Event} event\n * @return {boolean}\n */\nfunction safeDispatchEvent(target, event) {\n  var check = 'on' + event.type.toLowerCase();\n  if (typeof target[check] === 'function') {\n    target[check](event);\n  }\n  return target.dispatchEvent(event);\n}\n\n/**\n * @param {Element} el to check for stacking context\n * @return {boolean} whether this el or its parents creates a stacking context\n */\nfunction createsStackingContext(el) {\n  while (el && el !== document.body) {\n    var s = window.getComputedStyle(el);\n    var invalid = function(k, ok) {\n      return !(s[k] === undefined || s[k] === ok);\n    };\n\n    if (s.opacity < 1 ||\n        invalid('zIndex', 'auto') ||\n        invalid('transform', 'none') ||\n        invalid('mixBlendMode', 'normal') ||\n        invalid('filter', 'none') ||\n        invalid('perspective', 'none') ||\n        s['isolation'] === 'isolate' ||\n        s.position === 'fixed' ||\n        s.webkitOverflowScrolling === 'touch') {\n      return true;\n    }\n    el = el.parentElement;\n  }\n  return false;\n}\n\n/**\n * Finds the nearest <dialog> from the passed element.\n *\n * @param {Element} el to search from\n * @return {HTMLDialogElement} dialog found\n */\nfunction findNearestDialog(el) {\n  while (el) {\n    if (el.localName === 'dialog') {\n      return /** @type {HTMLDialogElement} */ (el);\n    }\n    if (el.parentElement) {\n      el = el.parentElement;\n    } else if (el.parentNode) {\n      el = el.parentNode.host;\n    } else {\n      el = null;\n    }\n  }\n  return null;\n}\n\n/**\n * Blur the specified element, as long as it's not the HTML body element.\n * This works around an IE9/10 bug - blurring the body causes Windows to\n * blur the whole application.\n *\n * @param {Element} el to blur\n */\nfunction safeBlur(el) {\n  // Find the actual focused element when the active element is inside a shadow root\n  while (el && el.shadowRoot && el.shadowRoot.activeElement) {\n    el = el.shadowRoot.activeElement;\n  }\n\n  if (el && el.blur && el !== document.body) {\n    el.blur();\n  }\n}\n\n/**\n * @param {!NodeList} nodeList to search\n * @param {Node} node to find\n * @return {boolean} whether node is inside nodeList\n */\nfunction inNodeList(nodeList, node) {\n  for (var i = 0; i < nodeList.length; ++i) {\n    if (nodeList[i] === node) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * @param {HTMLFormElement} el to check\n * @return {boolean} whether this form has method=\"dialog\"\n */\nfunction isFormMethodDialog(el) {\n  if (!el || !el.hasAttribute('method')) {\n    return false;\n  }\n  return el.getAttribute('method').toLowerCase() === 'dialog';\n}\n\n/**\n * @param {!DocumentFragment|!Element} hostElement\n * @return {?Element}\n */\nfunction findFocusableElementWithin(hostElement) {\n  // Note that this is 'any focusable area'. This list is probably not exhaustive, but the\n  // alternative involves stepping through and trying to focus everything.\n  var opts = ['button', 'input', 'keygen', 'select', 'textarea'];\n  var query = opts.map(function(el) {\n    return el + ':not([disabled])';\n  });\n  // TODO(samthor): tabindex values that are not numeric are not focusable.\n  query.push('[tabindex]:not([disabled]):not([tabindex=\"\"])');  // tabindex != \"\", not disabled\n  var target = hostElement.querySelector(query.join(', '));\n\n  if (!target && 'attachShadow' in Element.prototype) {\n    // If we haven't found a focusable target, see if the host element contains an element\n    // which has a shadowRoot.\n    // Recursively search for the first focusable item in shadow roots.\n    var elems = hostElement.querySelectorAll('*');\n    for (var i = 0; i < elems.length; i++) {\n      if (elems[i].tagName && elems[i].shadowRoot) {\n        target = findFocusableElementWithin(elems[i].shadowRoot);\n        if (target) {\n          break;\n        }\n      }\n    }\n  }\n  return target;\n}\n\n/**\n * Determines if an element is attached to the DOM.\n * @param {Element} element to check\n * @return {boolean} whether the element is in DOM\n */\nfunction isConnected(element) {\n  return element.isConnected || document.body.contains(element);\n}\n\n/**\n * @param {!Event} event\n * @return {?Element}\n */\nfunction findFormSubmitter(event) {\n  if (event.submitter) {\n    return event.submitter;\n  }\n\n  var form = event.target;\n  if (!(form instanceof HTMLFormElement)) {\n    return null;\n  }\n\n  var submitter = dialogPolyfill.formSubmitter;\n  if (!submitter) {\n    var target = event.target;\n    var root = ('getRootNode' in target && target.getRootNode() || document);\n    submitter = root.activeElement;\n  }\n\n  if (!submitter || submitter.form !== form) {\n    return null;\n  }\n  return submitter;\n}\n\n/**\n * @param {!Event} event\n */\nfunction maybeHandleSubmit(event) {\n  if (event.defaultPrevented) {\n    return;\n  }\n  var form = /** @type {!HTMLFormElement} */ (event.target);\n\n  // We'd have a value if we clicked on an imagemap.\n  var value = dialogPolyfill.imagemapUseValue;\n  var submitter = findFormSubmitter(event);\n  if (value === null && submitter) {\n    value = submitter.value;\n  }\n\n  // There should always be a dialog as this handler is added specifically on them, but check just\n  // in case.\n  var dialog = findNearestDialog(form);\n  if (!dialog) {\n    return;\n  }\n\n  // Prefer formmethod on the button.\n  var formmethod = submitter && submitter.getAttribute('formmethod') || form.getAttribute('method');\n  if (formmethod !== 'dialog') {\n    return;\n  }\n  event.preventDefault();\n\n  if (value != null) {\n    // nb. we explicitly check against null/undefined\n    dialog.close(value);\n  } else {\n    dialog.close();\n  }\n}\n\n/**\n * @param {!HTMLDialogElement} dialog to upgrade\n * @constructor\n */\nfunction dialogPolyfillInfo(dialog) {\n  this.dialog_ = dialog;\n  this.replacedStyleTop_ = false;\n  this.openAsModal_ = false;\n\n  // Set a11y role. Browsers that support dialog implicitly know this already.\n  if (!dialog.hasAttribute('role')) {\n    dialog.setAttribute('role', 'dialog');\n  }\n\n  dialog.show = this.show.bind(this);\n  dialog.showModal = this.showModal.bind(this);\n  dialog.close = this.close.bind(this);\n\n  dialog.addEventListener('submit', maybeHandleSubmit, false);\n\n  if (!('returnValue' in dialog)) {\n    dialog.returnValue = '';\n  }\n\n  if ('MutationObserver' in window) {\n    var mo = new MutationObserver(this.maybeHideModal.bind(this));\n    mo.observe(dialog, {attributes: true, attributeFilter: ['open']});\n  } else {\n    // IE10 and below support. Note that DOMNodeRemoved etc fire _before_ removal. They also\n    // seem to fire even if the element was removed as part of a parent removal. Use the removed\n    // events to force downgrade (useful if removed/immediately added).\n    var removed = false;\n    var cb = function() {\n      removed ? this.downgradeModal() : this.maybeHideModal();\n      removed = false;\n    }.bind(this);\n    var timeout;\n    var delayModel = function(ev) {\n      if (ev.target !== dialog) { return; }  // not for a child element\n      var cand = 'DOMNodeRemoved';\n      removed |= (ev.type.substr(0, cand.length) === cand);\n      window.clearTimeout(timeout);\n      timeout = window.setTimeout(cb, 0);\n    };\n    ['DOMAttrModified', 'DOMNodeRemoved', 'DOMNodeRemovedFromDocument'].forEach(function(name) {\n      dialog.addEventListener(name, delayModel);\n    });\n  }\n  // Note that the DOM is observed inside DialogManager while any dialog\n  // is being displayed as a modal, to catch modal removal from the DOM.\n\n  Object.defineProperty(dialog, 'open', {\n    set: this.setOpen.bind(this),\n    get: dialog.hasAttribute.bind(dialog, 'open')\n  });\n\n  this.backdrop_ = document.createElement('div');\n  this.backdrop_.className = 'backdrop';\n  this.backdrop_.addEventListener('mouseup'  , this.backdropMouseEvent_.bind(this));\n  this.backdrop_.addEventListener('mousedown', this.backdropMouseEvent_.bind(this));\n  this.backdrop_.addEventListener('click'    , this.backdropMouseEvent_.bind(this));\n}\n\ndialogPolyfillInfo.prototype = /** @type {HTMLDialogElement.prototype} */ ({\n\n  get dialog() {\n    return this.dialog_;\n  },\n\n  /**\n   * Maybe remove this dialog from the modal top layer. This is called when\n   * a modal dialog may no longer be tenable, e.g., when the dialog is no\n   * longer open or is no longer part of the DOM.\n   */\n  maybeHideModal: function() {\n    if (this.dialog_.hasAttribute('open') && isConnected(this.dialog_)) { return; }\n    this.downgradeModal();\n  },\n\n  /**\n   * Remove this dialog from the modal top layer, leaving it as a non-modal.\n   */\n  downgradeModal: function() {\n    if (!this.openAsModal_) { return; }\n    this.openAsModal_ = false;\n    this.dialog_.style.zIndex = '';\n\n    // This won't match the native <dialog> exactly because if the user set top on a centered\n    // polyfill dialog, that top gets thrown away when the dialog is closed. Not sure it's\n    // possible to polyfill this perfectly.\n    if (this.replacedStyleTop_) {\n      this.dialog_.style.top = '';\n      this.replacedStyleTop_ = false;\n    }\n\n    // Clear the backdrop and remove from the manager.\n    this.backdrop_.parentNode && this.backdrop_.parentNode.removeChild(this.backdrop_);\n    dialogPolyfill.dm.removeDialog(this);\n  },\n\n  /**\n   * @param {boolean} value whether to open or close this dialog\n   */\n  setOpen: function(value) {\n    if (value) {\n      this.dialog_.hasAttribute('open') || this.dialog_.setAttribute('open', '');\n    } else {\n      this.dialog_.removeAttribute('open');\n      this.maybeHideModal();  // nb. redundant with MutationObserver\n    }\n  },\n\n  /**\n   * Handles mouse events ('mouseup', 'mousedown', 'click') on the fake .backdrop element, redirecting them as if\n   * they were on the dialog itself.\n   *\n   * @param {!Event} e to redirect\n   */\n  backdropMouseEvent_: function(e) {\n    if (!this.dialog_.hasAttribute('tabindex')) {\n      // Clicking on the backdrop should move the implicit cursor, even if dialog cannot be\n      // focused. Create a fake thing to focus on. If the backdrop was _before_ the dialog, this\n      // would not be needed - clicks would move the implicit cursor there.\n      var fake = document.createElement('div');\n      this.dialog_.insertBefore(fake, this.dialog_.firstChild);\n      fake.tabIndex = -1;\n      fake.focus();\n      this.dialog_.removeChild(fake);\n    } else {\n      this.dialog_.focus();\n    }\n\n    var redirectedEvent = document.createEvent('MouseEvents');\n    redirectedEvent.initMouseEvent(e.type, e.bubbles, e.cancelable, window,\n        e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey,\n        e.altKey, e.shiftKey, e.metaKey, e.button, e.relatedTarget);\n    this.dialog_.dispatchEvent(redirectedEvent);\n    e.stopPropagation();\n  },\n\n  /**\n   * Focuses on the first focusable element within the dialog. This will always blur the current\n   * focus, even if nothing within the dialog is found.\n   */\n  focus_: function() {\n    // Find element with `autofocus` attribute, or fall back to the first form/tabindex control.\n    var target = this.dialog_.querySelector('[autofocus]:not([disabled])');\n    if (!target && this.dialog_.tabIndex >= 0) {\n      target = this.dialog_;\n    }\n    if (!target) {\n      target = findFocusableElementWithin(this.dialog_);\n    }\n    safeBlur(document.activeElement);\n    target && target.focus();\n  },\n\n  /**\n   * Sets the zIndex for the backdrop and dialog.\n   *\n   * @param {number} dialogZ\n   * @param {number} backdropZ\n   */\n  updateZIndex: function(dialogZ, backdropZ) {\n    if (dialogZ < backdropZ) {\n      throw new Error('dialogZ should never be < backdropZ');\n    }\n    this.dialog_.style.zIndex = dialogZ;\n    this.backdrop_.style.zIndex = backdropZ;\n  },\n\n  /**\n   * Shows the dialog. If the dialog is already open, this does nothing.\n   */\n  show: function() {\n    if (!this.dialog_.open) {\n      this.setOpen(true);\n      this.focus_();\n    }\n  },\n\n  /**\n   * Show this dialog modally.\n   */\n  showModal: function() {\n    if (this.dialog_.hasAttribute('open')) {\n      throw new Error('Failed to execute \\'showModal\\' on dialog: The element is already open, and therefore cannot be opened modally.');\n    }\n    if (!isConnected(this.dialog_)) {\n      throw new Error('Failed to execute \\'showModal\\' on dialog: The element is not in a Document.');\n    }\n    if (!dialogPolyfill.dm.pushDialog(this)) {\n      throw new Error('Failed to execute \\'showModal\\' on dialog: There are too many open modal dialogs.');\n    }\n\n    if (createsStackingContext(this.dialog_.parentElement)) {\n      console.warn('A dialog is being shown inside a stacking context. ' +\n          'This may cause it to be unusable. For more information, see this link: ' +\n          'https://github.com/GoogleChrome/dialog-polyfill/#stacking-context');\n    }\n\n    this.setOpen(true);\n    this.openAsModal_ = true;\n\n    // Optionally center vertically, relative to the current viewport.\n    if (dialogPolyfill.needsCentering(this.dialog_)) {\n      dialogPolyfill.reposition(this.dialog_);\n      this.replacedStyleTop_ = true;\n    } else {\n      this.replacedStyleTop_ = false;\n    }\n\n    // Insert backdrop.\n    this.dialog_.parentNode.insertBefore(this.backdrop_, this.dialog_.nextSibling);\n\n    // Focus on whatever inside the dialog.\n    this.focus_();\n  },\n\n  /**\n   * Closes this HTMLDialogElement. This is optional vs clearing the open\n   * attribute, however this fires a 'close' event.\n   *\n   * @param {string=} opt_returnValue to use as the returnValue\n   */\n  close: function(opt_returnValue) {\n    if (!this.dialog_.hasAttribute('open')) {\n      throw new Error('Failed to execute \\'close\\' on dialog: The element does not have an \\'open\\' attribute, and therefore cannot be closed.');\n    }\n    this.setOpen(false);\n\n    // Leave returnValue untouched in case it was set directly on the element\n    if (opt_returnValue !== undefined) {\n      this.dialog_.returnValue = opt_returnValue;\n    }\n\n    // Triggering \"close\" event for any attached listeners on the <dialog>.\n    var closeEvent = new supportCustomEvent('close', {\n      bubbles: false,\n      cancelable: false\n    });\n    safeDispatchEvent(this.dialog_, closeEvent);\n  }\n\n});\n\nvar dialogPolyfill = {};\n\ndialogPolyfill.reposition = function(element) {\n  var scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n  var topValue = scrollTop + (window.innerHeight - element.offsetHeight) / 2;\n  element.style.top = Math.max(scrollTop, topValue) + 'px';\n};\n\ndialogPolyfill.isInlinePositionSetByStylesheet = function(element) {\n  for (var i = 0; i < document.styleSheets.length; ++i) {\n    var styleSheet = document.styleSheets[i];\n    var cssRules = null;\n    // Some browsers throw on cssRules.\n    try {\n      cssRules = styleSheet.cssRules;\n    } catch (e) {}\n    if (!cssRules) { continue; }\n    for (var j = 0; j < cssRules.length; ++j) {\n      var rule = cssRules[j];\n      var selectedNodes = null;\n      // Ignore errors on invalid selector texts.\n      try {\n        selectedNodes = document.querySelectorAll(rule.selectorText);\n      } catch(e) {}\n      if (!selectedNodes || !inNodeList(selectedNodes, element)) {\n        continue;\n      }\n      var cssTop = rule.style.getPropertyValue('top');\n      var cssBottom = rule.style.getPropertyValue('bottom');\n      if ((cssTop && cssTop !== 'auto') || (cssBottom && cssBottom !== 'auto')) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\ndialogPolyfill.needsCentering = function(dialog) {\n  var computedStyle = window.getComputedStyle(dialog);\n  if (computedStyle.position !== 'absolute') {\n    return false;\n  }\n\n  // We must determine whether the top/bottom specified value is non-auto.  In\n  // WebKit/Blink, checking computedStyle.top == 'auto' is sufficient, but\n  // Firefox returns the used value. So we do this crazy thing instead: check\n  // the inline style and then go through CSS rules.\n  if ((dialog.style.top !== 'auto' && dialog.style.top !== '') ||\n      (dialog.style.bottom !== 'auto' && dialog.style.bottom !== '')) {\n    return false;\n  }\n  return !dialogPolyfill.isInlinePositionSetByStylesheet(dialog);\n};\n\n/**\n * @param {!Element} element to force upgrade\n */\ndialogPolyfill.forceRegisterDialog = function(element) {\n  if (window.HTMLDialogElement || element.showModal) {\n    console.warn('This browser already supports <dialog>, the polyfill ' +\n        'may not work correctly', element);\n  }\n  if (element.localName !== 'dialog') {\n    throw new Error('Failed to register dialog: The element is not a dialog.');\n  }\n  new dialogPolyfillInfo(/** @type {!HTMLDialogElement} */ (element));\n};\n\n/**\n * @param {!Element} element to upgrade, if necessary\n */\ndialogPolyfill.registerDialog = function(element) {\n  if (!element.showModal) {\n    dialogPolyfill.forceRegisterDialog(element);\n  }\n};\n\n/**\n * @constructor\n */\ndialogPolyfill.DialogManager = function() {\n  /** @type {!Array<!dialogPolyfillInfo>} */\n  this.pendingDialogStack = [];\n\n  var checkDOM = this.checkDOM_.bind(this);\n\n  // The overlay is used to simulate how a modal dialog blocks the document.\n  // The blocking dialog is positioned on top of the overlay, and the rest of\n  // the dialogs on the pending dialog stack are positioned below it. In the\n  // actual implementation, the modal dialog stacking is controlled by the\n  // top layer, where z-index has no effect.\n  this.overlay = document.createElement('div');\n  this.overlay.className = '_dialog_overlay';\n  this.overlay.addEventListener('click', function(e) {\n    this.forwardTab_ = undefined;\n    e.stopPropagation();\n    checkDOM([]);  // sanity-check DOM\n  }.bind(this));\n\n  this.handleKey_ = this.handleKey_.bind(this);\n  this.handleFocus_ = this.handleFocus_.bind(this);\n\n  this.zIndexLow_ = 100000;\n  this.zIndexHigh_ = 100000 + 150;\n\n  this.forwardTab_ = undefined;\n\n  if ('MutationObserver' in window) {\n    this.mo_ = new MutationObserver(function(records) {\n      var removed = [];\n      records.forEach(function(rec) {\n        for (var i = 0, c; c = rec.removedNodes[i]; ++i) {\n          if (!(c instanceof Element)) {\n            continue;\n          } else if (c.localName === 'dialog') {\n            removed.push(c);\n          }\n          removed = removed.concat(c.querySelectorAll('dialog'));\n        }\n      });\n      removed.length && checkDOM(removed);\n    });\n  }\n};\n\n/**\n * Called on the first modal dialog being shown. Adds the overlay and related\n * handlers.\n */\ndialogPolyfill.DialogManager.prototype.blockDocument = function() {\n  document.documentElement.addEventListener('focus', this.handleFocus_, true);\n  document.addEventListener('keydown', this.handleKey_);\n  this.mo_ && this.mo_.observe(document, {childList: true, subtree: true});\n};\n\n/**\n * Called on the first modal dialog being removed, i.e., when no more modal\n * dialogs are visible.\n */\ndialogPolyfill.DialogManager.prototype.unblockDocument = function() {\n  document.documentElement.removeEventListener('focus', this.handleFocus_, true);\n  document.removeEventListener('keydown', this.handleKey_);\n  this.mo_ && this.mo_.disconnect();\n};\n\n/**\n * Updates the stacking of all known dialogs.\n */\ndialogPolyfill.DialogManager.prototype.updateStacking = function() {\n  var zIndex = this.zIndexHigh_;\n\n  for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n    dpi.updateZIndex(--zIndex, --zIndex);\n    if (i === 0) {\n      this.overlay.style.zIndex = --zIndex;\n    }\n  }\n\n  // Make the overlay a sibling of the dialog itself.\n  var last = this.pendingDialogStack[0];\n  if (last) {\n    var p = last.dialog.parentNode || document.body;\n    p.appendChild(this.overlay);\n  } else if (this.overlay.parentNode) {\n    this.overlay.parentNode.removeChild(this.overlay);\n  }\n};\n\n/**\n * @param {Element} candidate to check if contained or is the top-most modal dialog\n * @return {boolean} whether candidate is contained in top dialog\n */\ndialogPolyfill.DialogManager.prototype.containedByTopDialog_ = function(candidate) {\n  while (candidate = findNearestDialog(candidate)) {\n    for (var i = 0, dpi; dpi = this.pendingDialogStack[i]; ++i) {\n      if (dpi.dialog === candidate) {\n        return i === 0;  // only valid if top-most\n      }\n    }\n    candidate = candidate.parentElement;\n  }\n  return false;\n};\n\ndialogPolyfill.DialogManager.prototype.handleFocus_ = function(event) {\n  var target = event.composedPath ? event.composedPath()[0] : event.target;\n\n  if (this.containedByTopDialog_(target)) { return; }\n\n  if (document.activeElement === document.documentElement) { return; }\n\n  event.preventDefault();\n  event.stopPropagation();\n  safeBlur(/** @type {Element} */ (target));\n\n  if (this.forwardTab_ === undefined) { return; }  // move focus only from a tab key\n\n  var dpi = this.pendingDialogStack[0];\n  var dialog = dpi.dialog;\n  var position = dialog.compareDocumentPosition(target);\n  if (position & Node.DOCUMENT_POSITION_PRECEDING) {\n    if (this.forwardTab_) {\n      // forward\n      dpi.focus_();\n    } else if (target !== document.documentElement) {\n      // backwards if we're not already focused on <html>\n      document.documentElement.focus();\n    }\n  }\n\n  return false;\n};\n\ndialogPolyfill.DialogManager.prototype.handleKey_ = function(event) {\n  this.forwardTab_ = undefined;\n  if (event.keyCode === 27) {\n    event.preventDefault();\n    event.stopPropagation();\n    var cancelEvent = new supportCustomEvent('cancel', {\n      bubbles: false,\n      cancelable: true\n    });\n    var dpi = this.pendingDialogStack[0];\n    if (dpi && safeDispatchEvent(dpi.dialog, cancelEvent)) {\n      dpi.dialog.close();\n    }\n  } else if (event.keyCode === 9) {\n    this.forwardTab_ = !event.shiftKey;\n  }\n};\n\n/**\n * Finds and downgrades any known modal dialogs that are no longer displayed. Dialogs that are\n * removed and immediately readded don't stay modal, they become normal.\n *\n * @param {!Array<!HTMLDialogElement>} removed that have definitely been removed\n */\ndialogPolyfill.DialogManager.prototype.checkDOM_ = function(removed) {\n  // This operates on a clone because it may cause it to change. Each change also calls\n  // updateStacking, which only actually needs to happen once. But who removes many modal dialogs\n  // at a time?!\n  var clone = this.pendingDialogStack.slice();\n  clone.forEach(function(dpi) {\n    if (removed.indexOf(dpi.dialog) !== -1) {\n      dpi.downgradeModal();\n    } else {\n      dpi.maybeHideModal();\n    }\n  });\n};\n\n/**\n * @param {!dialogPolyfillInfo} dpi\n * @return {boolean} whether the dialog was allowed\n */\ndialogPolyfill.DialogManager.prototype.pushDialog = function(dpi) {\n  var allowed = (this.zIndexHigh_ - this.zIndexLow_) / 2 - 1;\n  if (this.pendingDialogStack.length >= allowed) {\n    return false;\n  }\n  if (this.pendingDialogStack.unshift(dpi) === 1) {\n    this.blockDocument();\n  }\n  this.updateStacking();\n  return true;\n};\n\n/**\n * @param {!dialogPolyfillInfo} dpi\n */\ndialogPolyfill.DialogManager.prototype.removeDialog = function(dpi) {\n  var index = this.pendingDialogStack.indexOf(dpi);\n  if (index === -1) { return; }\n\n  this.pendingDialogStack.splice(index, 1);\n  if (this.pendingDialogStack.length === 0) {\n    this.unblockDocument();\n  }\n  this.updateStacking();\n};\n\ndialogPolyfill.dm = new dialogPolyfill.DialogManager();\ndialogPolyfill.formSubmitter = null;\ndialogPolyfill.imagemapUseValue = null;\n\n/**\n * Installs global handlers, such as click listers and native method overrides. These are needed\n * even if a no dialog is registered, as they deal with <form method=\"dialog\">.\n */\nif (window.HTMLDialogElement === undefined) {\n\n  /**\n   * If HTMLFormElement translates method=\"DIALOG\" into 'get', then replace the descriptor with\n   * one that returns the correct value.\n   */\n  var testForm = document.createElement('form');\n  testForm.setAttribute('method', 'dialog');\n  if (testForm.method !== 'dialog') {\n    var methodDescriptor = Object.getOwnPropertyDescriptor(HTMLFormElement.prototype, 'method');\n    if (methodDescriptor) {\n      // nb. Some older iOS and older PhantomJS fail to return the descriptor. Don't do anything\n      // and don't bother to update the element.\n      var realGet = methodDescriptor.get;\n      methodDescriptor.get = function() {\n        if (isFormMethodDialog(this)) {\n          return 'dialog';\n        }\n        return realGet.call(this);\n      };\n      var realSet = methodDescriptor.set;\n      /** @this {HTMLElement} */\n      methodDescriptor.set = function(v) {\n        if (typeof v === 'string' && v.toLowerCase() === 'dialog') {\n          return this.setAttribute('method', v);\n        }\n        return realSet.call(this, v);\n      };\n      Object.defineProperty(HTMLFormElement.prototype, 'method', methodDescriptor);\n    }\n  }\n\n  /**\n   * Global 'click' handler, to capture the <input type=\"submit\"> or <button> element which has\n   * submitted a <form method=\"dialog\">. Needed as Safari and others don't report this inside\n   * document.activeElement.\n   */\n  document.addEventListener('click', function(ev) {\n    dialogPolyfill.formSubmitter = null;\n    dialogPolyfill.imagemapUseValue = null;\n    if (ev.defaultPrevented) { return; }  // e.g. a submit which prevents default submission\n\n    var target = /** @type {Element} */ (ev.target);\n    if ('composedPath' in ev) {\n      var path = ev.composedPath();\n      target = path.shift() || target;\n    }\n    if (!target || !isFormMethodDialog(target.form)) { return; }\n\n    var valid = (target.type === 'submit' && ['button', 'input'].indexOf(target.localName) > -1);\n    if (!valid) {\n      if (!(target.localName === 'input' && target.type === 'image')) { return; }\n      // this is a <input type=\"image\">, which can submit forms\n      dialogPolyfill.imagemapUseValue = ev.offsetX + ',' + ev.offsetY;\n    }\n\n    var dialog = findNearestDialog(target);\n    if (!dialog) { return; }\n\n    dialogPolyfill.formSubmitter = target;\n\n  }, false);\n\n  /**\n   * Global 'submit' handler. This handles submits of `method=\"dialog\"` which are invalid, i.e.,\n   * outside a dialog. They get prevented.\n   */\n  document.addEventListener('submit', function(ev) {\n    var form = ev.target;\n    var dialog = findNearestDialog(form);\n    if (dialog) {\n      return;  // ignore, handle there\n    }\n\n    var submitter = findFormSubmitter(ev);\n    var formmethod = submitter && submitter.getAttribute('formmethod') || form.getAttribute('method');\n    if (formmethod === 'dialog') {\n      ev.preventDefault();\n    }\n  });\n\n  /**\n   * Replace the native HTMLFormElement.submit() method, as it won't fire the\n   * submit event and give us a chance to respond.\n   */\n  var nativeFormSubmit = HTMLFormElement.prototype.submit;\n  var replacementFormSubmit = function () {\n    if (!isFormMethodDialog(this)) {\n      return nativeFormSubmit.call(this);\n    }\n    var dialog = findNearestDialog(this);\n    dialog && dialog.close();\n  };\n  HTMLFormElement.prototype.submit = replacementFormSubmit;\n}\n\nexport default dialogPolyfill;\n"],"sourceRoot":""}